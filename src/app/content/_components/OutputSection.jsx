// 'use client';

// import { Editor } from '@toast-ui/react-editor';
// import { Copy } from 'lucide-react';
// import { useEffect, useRef } from 'react';
// import { toast } from 'sonner';


// const OutputSection = ({ aiModelResponse }) => {


//   const referenceToEditor = useRef();


//   useEffect(() => {

//     const editorInstance = referenceToEditor.current.getInstance();

//     editorInstance.setMarkdown(aiModelResponse);

//   }, [aiModelResponse]);


//   const onCopyResponseToClipboard = () => {

//     const editorInstance = referenceToEditor.current.getInstance();

//     const markdownContent = editorInstance.getMarkdown();

//     navigator.clipboard.writeText(markdownContent);

//     toast("Response successfully copied to clipboard", {
//       position: 'top-right'
//     });

//   }


//   return (
//     <div className="shadow-lg border w-full">

//       <div className="flex items-center justify-between p-4 lg:p-5">

//         <h2 className="font-semibold text-base lg:text-lg tracking-wider">
//           Your Result
//         </h2>

//         <Copy size={20} className="text-primary cursor-pointer" onClick={onCopyResponseToClipboard} />

//       </div>

//       <Editor
//         initialValue="the output generated by the Google Gemini model will be displayed here"
//         previewStyle="vertical"
//         height="400px" 
//         initialEditType="wysiwyg"
//         useCommandShortcut={true}
//         ref={referenceToEditor}
//         className="max-h-96" 
//       />

//     </div>

//   );
// };

// export default OutputSection;

'use client';

import { Editor } from '@toast-ui/react-editor';
import { Copy, Download } from 'lucide-react';
import { useEffect, useRef } from 'react';
import { toast } from 'sonner';
import jsPDF from 'jspdf';
import "jspdf-autotable";
import html2canvas from 'html2canvas';

const OutputSection = ({ aiModelResponse }) => {
  const referenceToEditor = useRef();
  const hiddenDivRef = useRef(null);

  useEffect(() => {
    const editorInstance = referenceToEditor.current.getInstance();
    editorInstance.setMarkdown(aiModelResponse);
  }, [aiModelResponse]);

  // Function to copy response
  const onCopyResponseToClipboard = () => {
    const editorInstance = referenceToEditor.current.getInstance();
    const markdownContent = editorInstance.getMarkdown();
    navigator.clipboard.writeText(markdownContent);

    toast("Response successfully copied to clipboard", {
      position: 'top-right'
    });
  };

  // Function to download response as PDF
  // const onDownloadAsPDF = async () => {
  //   const editorInstance = referenceToEditor.current.getInstance();
  //   const htmlContent = editorInstance.getHTML(); // ✅ Use getHTML() instead of getRootElement()

  //   // Insert content into hidden div for rendering
  //   if (hiddenDivRef.current) {
  //     hiddenDivRef.current.innerHTML = htmlContent;
  //   }

  //   html2canvas(hiddenDivRef.current).then((canvas) => {
  //     const imgData = canvas.toDataURL('image/png');
  //     const pdf = new jsPDF('p', 'mm', 'a4');

  //     const imgWidth = 190;
  //     const imgHeight = (canvas.height * imgWidth) / canvas.width;

  //     pdf.addImage(imgData, 'PNG', 10, 10, imgWidth, imgHeight);
  //     pdf.save('Generated_Blog.pdf');
  //   });

  //   toast("PDF downloaded successfully!", {
  //     position: 'top-right'
  //   });
  // };








  // const onDownloadAsPDF = () => {
  //   if (!referenceToEditor.current) {
  //     toast.error("Editor not loaded yet!");
  //     return;
  //   }
  
  //   const editorInstance = referenceToEditor.current.getInstance();
  //   if (!editorInstance) {
  //     toast.error("Error accessing the editor instance.");
  //     return;
  //   }
  
  //   const textContent = editorInstance.getMarkdown();
  
  //   if (!textContent || textContent.trim() === "") {
  //     toast.error("No content to download as PDF.");
  //     return;
  //   }
  
  //   const pdf = new jsPDF();
  //   pdf.setFont("helvetica", "normal");
  //   pdf.setFontSize(12);
  
  //   const marginLeft = 10;
  //   const marginTop = 10;
  //   const maxWidth = 180;
  
  //   // Split large text into multiple lines
  //   const splitText = pdf.splitTextToSize(textContent, maxWidth);
  //   pdf.text(splitText, marginLeft, marginTop);
  
  //   pdf.save("Generated_Blog.pdf");
  
  //   toast.success("PDF downloaded successfully!", { position: "top-right" });
  // };




const onDownloadAsPDF = () => {
  if (!referenceToEditor.current) {
    toast.error("Editor not loaded yet!");
    return;
  }

  const editorInstance = referenceToEditor.current.getInstance();
  if (!editorInstance) {
    toast.error("Error accessing the editor instance.");
    return;
  }

  const textContent = editorInstance.getMarkdown();
  if (!textContent || textContent.trim() === "") {
    toast.error("No content to download as PDF.");
    return;
  }

  const pdf = new jsPDF();
  pdf.setFont("helvetica", "normal");

  let y = 10; // Vertical spacing

  // Split by lines and apply formatting
  const lines = textContent.split("\n");

  lines.forEach((line) => {
    if (line.startsWith("## ")) {
      // Header Level 2 (H2)
      pdf.setFontSize(16);
      pdf.setFont("helvetica", "bold");
      pdf.text(line.replace("## ", ""), 10, y);
      y += 10;
    } else if (line.startsWith("**")) {
      // Bold Text
      pdf.setFontSize(14);
      pdf.setFont("helvetica", "bold");
      pdf.text(line.replace(/\*\*/g, ""), 10, y);
      y += 8;
    } else if (line.startsWith("- ")) {
      // Bullet Points
      pdf.setFontSize(12);
      pdf.setFont("helvetica", "normal");
      pdf.text(`• ${line.replace("- ", "")}`, 15, y);
      y += 7;
    } else {
      // Normal Text
      pdf.setFontSize(12);
      pdf.setFont("helvetica", "normal");
      const splitLine = pdf.splitTextToSize(line, 180);
      pdf.text(splitLine, 10, y);
      y += 7 * splitLine.length;
    }
  });

  pdf.save("Formatted_Blog.pdf");

  toast.success("Formatted PDF downloaded successfully!", { position: "top-right" });
};


  return (
    <div className="shadow-lg border w-full">
      <div className="flex items-center justify-between p-4 lg:p-5">
        <h2 className="font-semibold text-base lg:text-lg tracking-wider">
          Your Result
        </h2>

        <div className="flex gap-4">
          <Copy size={20} className="text-primary cursor-pointer" onClick={onCopyResponseToClipboard} />
          <Download size={20} className="text-primary cursor-pointer" onClick={onDownloadAsPDF} />
        </div>
      </div>

      {/* Hidden div to store HTML content for PDF conversion */}
      <div ref={hiddenDivRef} className="hidden"></div>

      <Editor
        initialValue="The output generated by the Google Gemini model will be displayed here"
        previewStyle="vertical"
        height="400px"
        initialEditType="wysiwyg"
        useCommandShortcut={true}
        ref={referenceToEditor}
        className="max-h-96"
      />
    </div>
  );
};

export default OutputSection;
